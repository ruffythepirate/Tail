/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jc.se.util.view.labelpane;

import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JLabel;

/**
 *
 * @author Ruffy
 */
public class LabelPane extends javax.swing.JPanel implements Observer{

    
    protected ILabelController _controller;
    protected LabelList _labelList;
    
    private List<JLabel> _labelComponents;
    
    private Map<JLabel, LabelItem> _itemDictionary;
    
    private Observable _requestLabelAction;
    
    /**
     * Creates new form LabelPane
     */
    public LabelPane() {
        initComponents();
        
        setLayout(new FlowLayout());
        
        _itemDictionary = new HashMap<JLabel, LabelItem>();

        setLabelList(new LabelList());
        
        _labelComponents = new ArrayList<JLabel>();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        try {
        if(arg instanceof LabelsUpdatedEvent) {
            LabelsUpdatedEvent event = (LabelsUpdatedEvent) arg;
            
            if(event.getEventType() == LabelsUpdatedEvent.EVENT_LABEL_ADDED) {
                addLabel(event.getLabel());
            } else if(event.getEventType() == LabelsUpdatedEvent.EVENT_LABEL_REMOVED) {
                removeLabel(event.getLabel());                
            }

        }
        }
        catch(Exception ex){
            
        }
    }
    
    private void addLabel(LabelItem label) {
        
        JLabel newLabel = new JLabel(label.getText());
        newLabel.setVisible(true);
        _labelComponents.add(newLabel);
        _itemDictionary.put(newLabel, label);

         newLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLabel eventSender = (JLabel) evt.getComponent();
                
                LabelItem labelItem = _itemDictionary.get(eventSender);
                _controller.RemoveLabel(labelItem);
            }
        });
        add(newLabel);
        revalidate();
   }
    
    private void removeLabel(LabelItem label) {
        for(JLabel addedLabel : _labelComponents) {
            
            LabelItem labelItem = _itemDictionary.get(addedLabel);
            if(labelItem == label) {
                
                _labelComponents.remove(addedLabel);
                remove(addedLabel);
                _itemDictionary.remove(addedLabel);
                break;
            }
        }
        revalidate();
        repaint();
    }

    public LabelList getLabelList() {
        return _labelList;
    }

    /**
     * @param _labelList the _labelList to set
     */
    public void setLabelList(LabelList _labelList) {

        if(_labelList != null) {
            _labelList.deleteObserver(this);
        }
        this._labelList = _labelList;
        
        _labelList.addObserver(this);

    }

    /**
     * @return the _controller
     */
    public ILabelController getController() {
        return _controller;
    }

    /**
     * @param _controller the _controller to set
     */
    public void setController(ILabelController _controller) {
        this._controller = _controller;
    }
    
}
